Project 1 Brief: Substrings and Dates
Project 1: Empirical Analysis
Hypothesis

This project will test the following hypothesis:

For large values of n, the mathematically-derived efficiency class of an algorithm accurately predicts the observed running time of an implementation of that algorithm.

To test this hypothesis, you will implement three algorithms; analyze each mathematically; analyze each empirically; and determine whether the empirical and mathematical analyses are in agreement.

You will produce two deliverables: 1) C++ code implementing the algorithms, and 2) a project report. There are two separate GradeScope assignments for submitting your deliverables.
The Problems and Algorithms

All three problems involve string processing
Run-Length Encode

The run-length encode (Links to an external site.) problem involves compressing a string so that it takes less space. A "run" is a substring of repeated characters, for example "aaaa". Run-length encoding means replacing a run with a single copy of the character and count of how many times it appears. For example, "aaaa" is replaced with "4a", because there are 4 copies of the letter 'a'. In our run-length encoding problem, all runs are encoded, and the input string is limited to lower-case letter and space characters.

run-length encode problem problem
input: a string
of characters, where each character is a lower-case letter or space
output: a string where each run of repetitions of the character  is replaced with the string "

"

Example inputs and outputs:

    "aaa" becomes "3a"
    "heloooooooo there" becomes "hel8o there"
    "footloose and fancy free" becomes "f2otl2ose and fancy fr2e"

The following algorithm solves the run-length encode problem.

run_length_encode(S):
    C = ""
    if S is empty:
        return C
    run_char = S[0]
    run_length = 1
    for each character c in S after the first:
           if c == run_char:
               run_length++
           else:
               append_run(C, run_char, run_length)
               run_char = c
               run_length = 1
    append_run(C, run_char, run_length)
    return C

append_run(C, run_char, run_length):
    if run_length > 1:
        C.append(convert_to_string(run_length))
    C.append(run_char)

Longest Frequent Substring

In the longest frequent substring problem, we search for a long substring, where every character in the substring appears at least

times in the original string.

longest frequent substring problem
input: a string
 of characters, and integer
output: the longest string such that is a substring of and every character in appears at least times in

When
the "appears at least times" requirement is not a limitation at all, so the output is the entire string Note that the empty string "" counts as a substring of any so if is too large, no characters appear at least

times, and the output is "". Example inputs and outputs:

"abc", output is
"abc"
"abc",  output is
""
"aaabb",  output is
"aaa"
"aa_bb_baba_aaa",  output is

    "baba"

See the unit tests in algorithms_test.cpp for more examples.

The following algorithm solves the longest frequent substring problem.

longest_frequent_substring(S, k):
    freq = new dictionary that maps a char to an int
    for c in S:
        if c not in freq:
            freq[c] = 1
        else:
            freq[c]++
    best = ""
    for b from 0 through n-1:
        for e from b+1 through n:
            cand = S[b:e]
            if every character c in cand has freq[c] >= k:
                if cand.size() > best.size():
                    best = cand
    return best

Reformat Date

The third problem involves data cleansing (Links to an external site.) a string that may contain a date in various formats, and reformatting the date in string YYYY-MM-DD format.

reformate date problem
input: a string  
that may fit in pattern 1, 2, 3, 4 
output: a string that contains the same date in YYYY-MM-DD format; or throws an exception if

is invalid

There are four valid patterns for an input string:

    "Y-M-D", where Y, M, and D are positive integers (this resembles the output format)
    "M/D/Y", where Y, M, and D are positive integers
    "MONTH D, Y" where D and Y are positive integers, and MONTH is the full name of a month ("january", "february", ..., "december")
    "MON D, Y" where D and Y are positive integers, and MON is the first three letters of a month name ("jan", "feb", ..., "dec") 

Any number of leading spaces and trailing spaces are ignored.

The input is invalid, and your function should throw an exception, if any of the following are true:

does not fit pattern 1, 2, 3, or 4
MONTH is not a valid month name
MON is not a valid month abbreviation
Y is not in the range
M is not in the range
DAY is not in the range

(Some months actually have fewer than 31 days, but we are ignoring this to keep things simple.)

There is no provided algorithm for this problem. You will design, describe, and analyze your own algorithm.
Team Formation

As stated in the syllabus, you may work in a team of 1-3 students. Your first task is to decide on who will be on your team before you do any of the work described below.

In particular, you need to communicate with your team members, and reach consensus on the members of the team, before accepting the assignment invitation in GitHub. Teams cannot be changed in GitHub, so once you form a team there, you are stuck with it for the remainder of this project. (You can form different teams on other assignments.)
Algorithm Design and Mathematical Analysis

After forming your team, your next task is to design your own algorithm for the last problem. Your algorithm does not need to be complicated; the na√Øve pattern should suffice. As usual, write pseudocode for your algorithm, and revise the pseudocode until it is clear, correct, and terminates.

Then, do a mathematical analysis of each of the three algorithms. For each, perform a chronological step count, and prove the efficiency class of the algorithm.

You will present this information in your report document, described below.
Implementation

Next, implement all three algorithms in C++.
Obtaining and Pushing Code

We are using GitHub Education to distribute starter code; Tuffix to run and grade code; and GradeScope to collect submissions.

This document explains how to obtain starter code and push it to GitHub: GitHub Education / Tuffix Instructions (Links to an external site.) 

This Youtube video by David McLaren explains how to get started with GitHub: https://youtu.be/1a5L_xsGIm8 (Links to an external site.) 

Invitation link: https://classroom.github.com/a/Nq1-YnGY (Links to an external site.) 
Code Layout

You will need to work with the following files:

    algorithms.hpp is a C++ header that defines data types and functions for the algorithms described above. The function definitions are effectively empty; you will need to rewrite them to actually work properly.
    algorithms_test.cpp is a Google Test-based unit test program that checks whether the code in algorithms.hpp works or not. You can run the corresponding algorithms_test program to see whether your algorithm implementations are working correctly. The unit tests depend on the Google Test library, specifically /usr/lib/libgtest.a, which is included in Tuffix. Do not modify this source file. The autograder uses the original version of this file to prevent tampering.
    timing.cpp is a C++ program with a main() function that measures one experimental data point for each of the algorithms. You can expand upon this code to obtain several data points for each of your algorithm implementations.
    README.md is a markdown file with a place to write the names and CSUF-supplied email addresses of your team members. You need to modify this file and add the contact information for all team members.
    Makefile is a GNU make configuration file that automates compiling, running, and grading the project.

The repository also contains the following files, which you must leave unchanged, and may ignore. (You're welcome to look inside if you wish.)

    .gitignore configures git to ignore temporary files.
    LICENSE assigns the MIT License to the starter code.
    timer.hpp defines the Timer class that is used in algorithms_timing.cpp.
    grade.py is the autograder (script) that computes a score for your submission (see below).

Make Targets

You can use the "make" command inside a Tuffix shell to compile, run, test, and grade your submission.

To compile the test and timing programs:

$ make

To test your algorithm implementations for correctness:

$ make test

To grade your submission:

$ make grade

Rejected code: the autograder rejects a submission if it does not compile; crashes the unit tests (i.e. segfault); tdoes not have names in README.md; is simply a copy of the starter code with no changes; or the unit test source code has been modified. Rejected code corresponds to an "F" grade (approximately 50%).

To clean (delete) all compiled binaries and temporary files:

$ make clean

We recommend that you use these make commands inside Tuffix to confirm that your code works, and preview how your submission will be graded, before submitting your code to GradeScope.
Empirical Analysis

After you have finalized your code, conduct an empirical analysis of each of the three algorithms. For each algorithm:

    Gather empirical timing data by running your implementations for various values of 

As discussed in class, you need enough data points to establish the shape of the best-fit curve (at least 5 data points, maybe more), and you should use
  sizes that are large enough to produce large time values (multiple seconds or even minutes) to minimize instrumental error.
Draw a scatter plot and fit line for your timing data. The instance size
  should be on the horizontal axis and elapsed time should be on the vertical axis. Your plot should have a title; and each axis should have a label and units of measure.
Conclude whether or not your empirically-observed time efficiency data is consistent, or inconsistent, with your mathematically-derived big-

    efficiency class. (Hint: Our hypothesis is quite well established, so if your results are inconsistent, that most likely means that there's a problem with your math analysis, implementation, or empirical analysis.)

GradeScope Code Submission

Before the deadline, submit your work to the GradeScope code assignment. Follow the Code submissions (Links to an external site.) instructions at gradescope.com (Links to an external site.). We recommend using the "Submit a GitHub repository" method, which is less error-prone than the "Drag and drop your code file(s) into GradeScope" method.

Shortly after you make your submission, GradeScope will run the autograder to compute a numerical score for your code. This will be your score on the code part of the project. You can see the score and how it was computed at GradeScope.

We set up the autograder so that you can get frequent, early, feedback about the correctness of your code and how it will be graded. We recommend that you start early. With effective time management, every team should be able to get a perfect or near-perfect score.
Report Document

Finally, produce a brief written project report in PDF format. Submit your PDF to the GradeScope project report assignment. Your report should include the following:

    A title page that indicates that the report is about project 1; and has the name and CSUF-issued email address of every team member.
    Pseudocode describing your reformat date algorithm.
    Mathematical analyses for each of the three algorithms.
    Scatter plots for each of the three algorithms.
    Answers to the following questions. (Each answer should be at least one complete sentence.)
        What is the efficiency class of each of the algorithms, according to your own mathematical analysis? (You are not required to include all your math work, just state the classes you derived and proved.)
        Between the dip search and longest balanced span algorithms, is there a noticeable difference in the running speed? Which is faster, and by how much? Does this surprise you?
        Are the fit lines on your scatter plots consistent with the efficiency classes predicted by your math analyses? Justify your answer.
        Is all this evidence consistent or inconsistent with the hypothesis stated on the first page? Justify your answer.

Grading and Deadline

The project deadline is Tue Apr 5 11:59pm. Late submissions will not be accepted.

As stated above, the code assignment will be graded automatically by the "make grade" autograder.

The report will be graded according to a rubric involving the completeness, content, and presentation of the pseudocode, scatter plots, and question answers.

As usual, detailed rubric scores and feedback will be visible in GradeScope. Canvas will only contain total numerical scores. Grades will not be synced to Canvas until grading is complete, so your submission may show as "MISSING" in Canvas until grading is complete.

Be advised that we may use automated tools to detect plagiarism. Do not plagiarize. As stated in the syllabus, a submission that involves academic dishonesty will receive a 0% score (on both the code and report) and the incident will be reported to the Office of Student Conduct. A repeat offense will result in an "F" in the class and will be reported to the Student Conduct office.
